{{- if .Values.statefulset }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}
  labels:
    {{- include "tpl.labels" . | nindent 4 }}
    {{- with .Values.labels }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
  {{- with .Values.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}  
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  serviceName: {{ .Release.Name }}
  {{- with .Values.UpdateStrategy }}
  updateStrategy:
    {{- toYaml . | trim | nindent 4 }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "tpl.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        {{- range $key, $value := .Values.podAnnotations }}
        {{ $key }}: {{ $value | quote }}
        {{- end }}
        {{- if or .Values.ConfigMap .Values.extraConfigMap.enabled .Values.Secrets .Values.extraSecrets.enabled }}
        configChecksum: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        configChecksum: {{ include (print $.Template.BasePath "/secret.yaml") . | sha256sum }}
        configChecksum: {{ include (print $.Template.BasePath "/configmap_extra.yaml") . | sha256sum }}
        configChecksum: {{ include (print $.Template.BasePath "/secret_extra.yaml") . | sha256sum }}
        "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
        {{- end }}
      labels:
        {{- include "tpl.selectorLabels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}  
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      {{- if .Values.serviceAccount.create }}
      serviceAccountName: {{ include "tpl.serviceAccountName" . }}
      {{- end }}
      initContainers:
      {{- with .Values.extraInitContainers }}
        {{- toYaml . | nindent 8 }}
      {{- end }} 
      containers:
      {{- with .Values.extraContainers }}
         {{- toYaml . | nindent 8 }}
      {{- end }}
        - name: {{ .Release.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }} 
          image: "{{ .Values.image.registry }}/{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if .Values.command }}
          command: 
            {{- range .Values.command }}
              - {{ . | quote }}
            {{- end }}
          {{- else if .Values.postgresql.enabled }}
          {{/* PostgreSQL-specific command that bypasses chmod issues */}}
          command:
            - "sh"
            - "-c"
            - |
              set -e
              echo "Starting PostgreSQL with permission workaround..."
              mkdir -p "$PGDATA"
              chmod 700 "$PGDATA" 2>/dev/null || true
              mkdir -p /var/run/postgresql
              chmod 775 /var/run/postgresql 2>/dev/null || true
              chown -R postgres:postgres /var/run/postgresql 2>/dev/null || true
              
              if [ ! -s "$PGDATA/PG_VERSION" ]; then
                echo "Initializing database..."
                initdb --username="$POSTGRES_USER" \
                  --pwfile=<(echo "$POSTGRES_PASSWORD") \
                  --auth-local=trust \
                  --auth-host=md5 || exit 1
                
                echo "host all all all md5" >> "$PGDATA/pg_hba.conf"
                echo "listen_addresses='*'" >> "$PGDATA/postgresql.conf"
                
                pg_ctl -D "$PGDATA" -o "-c listen_addresses=''" -w start
                psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" <<-EOSQL
                  CREATE DATABASE "$POSTGRES_DB";
              EOSQL
                pg_ctl -D "$PGDATA" -m fast -w stop
              fi
              
              exec postgres
          {{- end }}
          {{- if .Values.args }}
          args:          
            {{- range .Values.args }}
              - {{ . | quote }}
            {{- end }}
          {{- end }}
          ports:
            {{- if .Values.containerPorts }}
            {{ toYaml .Values.containerPorts | nindent 12 }}
            {{- end }}
            {{- if .Values.probe }}
            {{ toYaml .Values.probe | nindent 10 }}
            {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          env:
            {{- if .Values.postgresql.enabled }}
            - name: PGDATA
              value: {{ .Values.postgresql.pgdata }}
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secretName | default (printf "%s-secret" .Release.Name) }}
                  key: {{ .Values.postgresql.passwordKey }}
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secretName | default (printf "%s-secret" .Release.Name) }}
                  key: {{ .Values.postgresql.userKey }}
            - name: POSTGRES_DB
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secretName | default (printf "%s-secret" .Release.Name) }}
                  key: {{ .Values.postgresql.databaseKey }}
            {{- end }}
            {{- if .Values.extraEnvs }}
            {{ toYaml .Values.extraEnvs | nindent 12 }}
            {{- end }}
            {{- if .Values.envFrom }}
          envFrom:
            {{ toYaml .Values.envFrom | nindent 12 }}
            {{- end }}
          volumeMounts:
            {{- if .Values.persistence.enabled }}
            {{- range .Values.persistence.volumeClaimTemplates }}
            - name: {{ .name }}
              mountPath: {{ .mountPath | default "/var/lib/postgresql/data" }}
              {{- if .subPath }}
              subPath: {{ .subPath }}
              {{- end }}
            {{- end }}
            {{- end }}
            {{- with .Values.extraVolumeMounts }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
            {{- range .Values.secretMounts }}
            - name: {{ .name }}
              mountPath: {{ .path }}
              {{- if .subPath }}
              subPath: {{ .subPath }}
              {{- end }}
            {{- end }}
            {{- range .Values.configMounts }}
            - name: {{ .name }}
              mountPath: {{ .path }}
            {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
        {{- with .Values.extraVolumes }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        {{- range .Values.secretMounts }}
        - name: {{ .name }}
          secret:
            secretName: {{ .secretName }}
        {{- end }}
        {{- range .Values.configMounts }}
        - name: {{ .name }}
          configMap:
            name: {{ .configName }}
        {{- end }}
  {{- if .Values.persistence.enabled }}
  volumeClaimTemplates:
  {{- range .Values.persistence.volumeClaimTemplates }}
  - metadata:
      name: {{ .name }}
    spec:
      accessModes: {{ .accessModes | toYaml | nindent 6 }}
      {{- if .storageClassName }}
      storageClassName: {{ .storageClassName }}
      {{- end }}
      resources:
        requests:
          storage: {{ .resources.requests.storage }}
  {{- end }}        
  {{- end }}  
{{- end }}